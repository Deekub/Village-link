const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const admin = require('firebase-admin');
const line = require('@line/bot-sdk');
const dotenv = require('dotenv');
const cron = require('node-cron');
const cors = require('cors');
const { Timestamp } = require('firebase-admin/firestore');
const axios = require('axios'); // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

dotenv.config();

// === Initialize Firebase Admin SDK ===
admin.initializeApp({
  credential: admin.credential.cert({
    type: process.env.FB_TYPE,
    project_id: process.env.FB_PROJECT_ID,
    private_key_id: process.env.FB_PRIVATE_KEY_ID,
    private_key: process.env.FB_PRIVATE_KEY.replace(/\\n/g, '\n'),
    client_email: process.env.FB_CLIENT_EMAIL,
    client_id: process.env.FB_CLIENT_ID,
    auth_uri: process.env.FB_AUTH_URI,
    token_uri: process.env.FB_TOKEN_URI,
    auth_provider_x509_cert_url: process.env.FB_AUTH_PROVIDER_CERT_URL,
    client_x509_cert_url: process.env.FB_CLIENT_CERT_URL,
  }),
});

const db = admin.firestore();

// === LINE Bot Config ===
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};
const client = new line.Client(config);

console.log('üîê LINE_CHANNEL_SECRET:', process.env.LINE_CHANNEL_SECRET);

// === Thaibulksms API Config === <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
// URL ‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ API ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 2.0 (‡∏´‡∏ô‡πâ‡∏≤ 4 ‡∏Ç‡∏≠‡∏á PDF)
const THAI_BULK_SMS_API_URL = 'https://api-v2.thaibulksms.com/sms';
const THAI_BULK_SMS_API_KEY = process.env.THAI_BULK_SMS_API_KEY;
const THAI_BULK_SMS_API_SECRET = process.env.THAI_BULK_SMS_API_SECRET;
const THAI_BULK_SMS_SENDER_NAME = process.env.THAI_BULK_SMS_SENDER_NAME;

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Keys ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏≠‡∏õ)
if (!THAI_BULK_SMS_API_KEY || !THAI_BULK_SMS_API_SECRET) {
  console.warn("üö® THAI_BULK_SMS_API_KEY and THAI_BULK_SMS_API_SECRET are not fully set in .env. SMS sending might be affected.");
} else {
  console.log("‚úÖ Thaibulksms API credentials are set.");
}

// === Middleware ===
app.use(cors({
  origin: ['http://localhost:8081'], // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà array ‡∏´‡∏•‡∏≤‡∏¢ origin ‡πÑ‡∏î‡πâ
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type'],
}));

// ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ bodyParser.json() ‡πÅ‡∏ö‡∏ö global
// app.use(bodyParser.json()); ¬†<--- ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å

// === Routes ===
app.get('/', (req, res) => {
  res.send('üëã Hello from Node.js + Firebase + LINE API Server!');
});

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö /notify route ‡πÉ‡∏ä‡πâ bodyParser.json() ‡πÅ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ route ‡∏ô‡∏µ‡πâ
app.post('/notify', bodyParser.json(), async (req, res) => {
  const { message } = req.body;
  if (!message) {
    return res.status(400).json({ error: 'Message is required' });
  }

  try {
    const usersSnapshot = await db.collection('lineUsers').get();
    if (usersSnapshot.empty) {
      return res.status(404).json({ error: 'No LINE users found' });
    }

    const pushPromises = [];
    usersSnapshot.forEach(userDoc => {
      pushPromises.push(client.pushMessage(userDoc.id, {
        type: 'text',
        text: message,
      }));
    });

    await Promise.all(pushPromises);

    res.json({ message: `Sent to ${usersSnapshot.size} users.` });
  } catch (error) {
    console.error('Error sending LINE messages:', error);
    res.status(500).json({ error: 'Failed to send messages' });
  }
});

// webhook route: line.middleware(config) ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
app.post('/webhook', line.middleware(config), async (req, res) => {
  try {
    await Promise.all(req.body.events.map(handleEvent));
    res.status(200).send('OK');
  } catch (err) {
    console.error(err);
    res.status(500).end();
  }
});

async function handleEvent(event) {
  if (event.type === 'message' && event.message.type === 'text') {
    const userId = event.source.userId;
    const text = event.message.text;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° incoming ‡∏û‡∏£‡πâ‡∏≠‡∏° unread: true
    await db.collection('lineUsers').doc(userId)
      .collection('messages').add({
        direction: 'in', // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        message: text,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        unread: true,
      });
  } else if (event.type === 'follow') {
    const userId = event.source.userId;

    try {
      const userRef = db.collection('lineUsers').doc(userId);
      const userDoc = await userRef.get();

      if (!userDoc.exists) {
        await userRef.set({
          followedAt: admin.firestore.FieldValue.serverTimestamp(),
        });
        console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà: ${userId}`);
      }

      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Village Link ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö!',
      });
    } catch (error) {
      console.error('‚ùå Error saving new user:', error);
      return null;
    }
  }

  // ‡∏Å‡∏£‡∏ì‡∏µ event ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏ô‡πÉ‡∏à
  return Promise.resolve(null);
}

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á SMS ‡∏ú‡πà‡∏≤‡∏ô Thaibulksms API === <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
async function sendSmsViaThaiBulkSms(phoneNumber, message) {
  if (!THAI_BULK_SMS_API_KEY || !THAI_BULK_SMS_API_SECRET) {
    console.warn("‚ö†Ô∏è SMS API credentials not fully set. Skipping SMS send for this call.");
    return { success: false, error: "SMS API credentials not set" };
  }

  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Basic Authorization header
    const authHeader = 'Basic ' + Buffer.from(THAI_BULK_SMS_API_KEY + ':' + THAI_BULK_SMS_API_SECRET).toString('base64');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏ô body ‡∏Ç‡∏≠‡∏á request ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö x-www-form-urlencoded
    const requestBody = new URLSearchParams({
      msisdn: phoneNumber,
      message: message,
      sender: THAI_BULK_SMS_SENDER_NAME,
      // force: 'corporate', // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Corporate SMS ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    }).toString();

    console.log("req body",requestBody);

    const response = await axios.post(THAI_BULK_SMS_API_URL, requestBody, {
      headers: {
        'Authorization': authHeader,
        'Content-Type': 'application/x-www-form-urlencoded' // API v2.0 ‡πÉ‡∏ä‡πâ Content-Type ‡∏ô‡∏µ‡πâ
      }
    });

    // ‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏´‡∏ô‡πâ‡∏≤ 15) Response ‡∏Ç‡∏≠‡∏á API V2.0 ‡∏à‡∏∞‡∏°‡∏µ remaining_credit, phone_number_list, bad_phone_number_list
    // ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞‡∏î‡∏π‡∏à‡∏≤‡∏Å bad_phone_number_list ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    if (response.data && response.data.bad_phone_number_list && response.data.bad_phone_number_list.length === 0) {
      console.log(`‚úÖ SMS sent successfully to ${phoneNumber}:`, response.data);
      return { success: true, data: response.data };
    } else {
      // ‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ error ‡∏à‡∏≤‡∏Å API
      const errorMessage = response.data.bad_phone_number_list && response.data.bad_phone_number_list.length > 0
                           ? `Failed for some numbers: ${JSON.stringify(response.data.bad_phone_number_list)}`
                           : 'Unknown error or empty bad_phone_number_list';
      console.error(`‚ùå Failed to send SMS to ${phoneNumber}:`, errorMessage, response.data);
      return { success: false, error: errorMessage, apiResponse: response.data };
    }
  } catch (error) {
    console.error(`‚ùå Error sending SMS to ${phoneNumber} via API:`, error.message);
    if (error.response) {
      console.error("  Response data:", error.response.data);
      console.error("  Response status:", error.response.status);
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 401 ‡∏´‡∏£‡∏∑‡∏≠ 403 ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key/Secret ‡∏´‡∏£‡∏∑‡∏≠ IP Whitelist
      if (error.response.status === 401 || error.response.status === 403) {
          console.error("  Possible API Key/Secret issue or IP Whitelist not configured.");
      }
    }
    return { success: false, error: error.message, apiResponse: error.response?.data };
  }
}

// === Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏¥‡∏á SMS ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á (Manual Trigger) === <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° Route ‡∏ô‡∏µ‡πâ
// ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å Postman/Insomnia ‡∏´‡∏£‡∏∑‡∏≠ Frontend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ
app.post('/send-sms', bodyParser.json(), async (req, res) => {
  const { phoneNumber, message } = req.body; // phoneNumber ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠ array ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå
  if (!phoneNumber || !message) {
    return res.status(400).json({ error: 'phoneNumber and message are required' });
  }

  // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key/Secret ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  if (!THAI_BULK_SMS_API_KEY || !THAI_BULK_SMS_API_SECRET) {
      return res.status(503).json({ error: "SMS API credentials not fully set. Please configure .env file." });
  }

  const phoneNumbers = Array.isArray(phoneNumber) ? phoneNumber : [phoneNumber];
  const results = [];

  for (const num of phoneNumbers) {
    const result = await sendSmsViaThaiBulkSms(num, message);
    results.push({ phoneNumber: num, ...result });
  }

  res.json({ message: 'SMS sending process initiated', results });
});


// === Cron Job: Run every 15 minutes === <-- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
// **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÉ‡∏ô Production ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Cron job ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô**
// ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á 4 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á Cron Job ‡∏´‡∏£‡∏∑‡∏≠ Logic ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
// ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
cron.schedule('*/15 * * * *', async () => {
  console.log('üîÑ Running scheduled broadcast task');

  try {
    const now = new Date();

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á <= ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
    const newsSnapshot = await db.collection('news')
      .where('sent', '==', false)
      .where('notifyTime', '<=', Timestamp.fromDate(now))
      .get();

    if (newsSnapshot.empty) {
      console.log('‚úÖ No news to broadcast.');
      return;
    }

    // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE
    const lineUsersSnapshot = await db.collection('lineUsers').get(); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πá‡∏ô lineUsersSnapshot
    const lineUserIds = lineUsersSnapshot.docs.map(doc => doc.id); // ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà userId
    if (lineUsersSnapshot.empty) {
      console.warn('‚ö†Ô∏è No LINE users found for LINE broadcast.');
      // ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á SMS ‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ LINE user
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SMS ‡∏à‡∏≤‡∏Å Collection 'smsRecipients'
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ collection ‡∏ä‡∏∑‡πà‡∏≠ 'smsRecipients' ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    const smsRecipientsSnapshot = await db.collection('smsRecipients').get(); // <-- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ collection ‡∏ô‡∏µ‡πâ
    const smsPhoneNumbers = smsRecipientsSnapshot.docs
      .map(doc => doc.data().phoneNumber)
      .filter(num => typeof num === 'string' && num.length > 0); // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    if (smsRecipientsSnapshot.empty || smsPhoneNumbers.length === 0) {
      console.warn('‚ö†Ô∏è No valid SMS recipients found in "smsRecipients" collection for SMS broadcast.');
    } else {
      console.log(`Found ${smsPhoneNumbers.length} SMS recipients.`);
    }


    for (const doc of newsSnapshot.docs) {
      const data = doc.data();

      // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE (‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°)
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ data.village, data.topic, etc. ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ
      const lineMessage = `üì¢ ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å ${data.village || '‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô'}
‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${data.topic || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£: ${data.action || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${data.detail || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}
‡πÄ‡∏ß‡∏•‡∏≤: ${data.notifyTime ? data.notifyTime.toDate().toLocaleString('th-TH', {hour12: false}) : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${data.fixTime || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;


      // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SMS (‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö 65 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡πÅ‡∏à‡πâ‡∏á: ‡∏´‡∏°‡∏π‡πà 1 ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ï‡∏±‡∏î‡πÑ‡∏ü‡∏ã‡πà‡∏≠‡∏°‡∏™‡∏≤‡∏¢ 14/6/25 16:05-16:35‡∏ô. 30 ‡∏ô‡∏≤‡∏ó‡∏µ"
      let smsDateTimePart = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤';
      if (data.notifyTime && data.fixTime) {
          try {
              // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì durationMinutes ‡∏à‡∏≤‡∏Å data.fixTime ‡πÄ‡∏ä‡πà‡∏ô "30 ‡∏ô‡∏≤‡∏ó‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 15 ‡∏ô‡∏≤‡∏ó‡∏µ"
              let durationMinutes = 0;
              const matchMinutes = data.fixTime.match(/(\d+)\s*‡∏ô‡∏≤‡∏ó‡∏µ/);
              const matchHours = data.fixTime.match(/(\d+)\s*‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/);
              if (matchMinutes) durationMinutes += parseInt(matchMinutes[1], 10);
              if (matchHours) durationMinutes += parseInt(matchHours[1], 10) * 60;

              const startTime = data.notifyTime.toDate();
              const endTime = new Date(startTime.getTime() + durationMinutes * 60 * 1000);

              const formattedDate = startTime.toLocaleDateString('th-TH', {day: '2-digit', month: '2-digit', year: '2-digit'}); // ‡πÄ‡∏ä‡πà‡∏ô "14/06/68"
              const formattedStartTime = startTime.toLocaleTimeString('th-TH', {hour: '2-digit', minute: '2-digit', hour12: false}); // ‡πÄ‡∏ä‡πà‡∏ô "16:05"
              const formattedEndTime = endTime.toLocaleTimeString('th-TH', {hour: '2-digit', minute: '2-digit', hour12: false}); // ‡πÄ‡∏ä‡πà‡∏ô "16:35"

              // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤ "14/6/25 16:05-16:35‡∏ô. 30 ‡∏ô‡∏≤‡∏ó‡∏µ"
              smsDateTimePart = `${formattedDate.replace(/(\d{2})\/(\d{2})\/(\d{2})/, '$1/$2/$3')} ${formattedStartTime}‚Äì${formattedEndTime}‡∏ô. ${durationMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
              // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "14/06/68 16:05‚Äì16:35‡∏ô. 30 ‡∏ô‡∏≤‡∏ó‡∏µ" (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)

              // ‡∏•‡∏≠‡∏á‡∏¢‡πà‡∏≠‡∏õ‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 25 ‡πÅ‡∏ó‡∏ô 68 ‡∏ñ‡πâ‡∏≤ toLocaleDateString ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô 68
              smsDateTimePart = smsDateTimePart.replace(/(\d{2})\/(\d{2})\/(\d{4})/, (match, d, m, y) => {
                  const shortYear = y.substring(2);
                  return `${d}/${m}/${shortYear}`;
              });


          } catch (e) {
              console.warn("Could not parse notifyTime or fixTime for SMS message. Using default.", e);
              smsDateTimePart = `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${data.notifyTime ? data.notifyTime.toDate().toLocaleDateString('th-TH', {day: '2-digit', month: '2-digit', year: '2-digit'}) : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;
          }
      }
      const smsMessage = `‡πÅ‡∏à‡πâ‡∏á: ‡∏´‡∏°‡∏π‡πà 1 ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ï‡∏±‡∏î‡πÑ‡∏ü‡∏ã‡πà‡∏≠‡∏°‡∏™‡∏≤‡∏¢ ${smsDateTimePart}`;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß SMS ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
      if (smsMessage.length > 70) {
          console.warn(`‚ö†Ô∏è SMS message is too long (${smsMessage.length} chars) for 1 segment. Please shorten it: "${smsMessage}"`);
          // ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á SMS ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 70 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
          // ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ)
      }


      // --- ‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô LINE ---
      if (lineUserIds.length > 0) {
        const linePushPromises = [];
        lineUserIds.forEach(userId => {
          linePushPromises.push(client.pushMessage(userId, {
            type: 'text',
            text: lineMessage,
          }));
        });
        await Promise.all(linePushPromises);
        console.log(`üì¨ ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß LINE ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${lineUserIds.length} ‡∏Ñ‡∏ô`);
      }

      // --- ‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô SMS ---
      // ‡∏™‡πà‡∏á SMS ‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key/Secret ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      if (smsPhoneNumbers.length > 0 && THAI_BULK_SMS_API_KEY && THAI_BULK_SMS_API_SECRET) {
        const smsSendPromises = [];
        // Loop ‡∏™‡πà‡∏á SMS ‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå (Thaibulksms API ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ,)
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö axios.post ‡πÅ‡∏ö‡∏ö x-www-form-urlencoded ‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏ô‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå
        for (const phoneNumber of smsPhoneNumbers) {
          smsSendPromises.push(sendSmsViaThaiBulkSms(phoneNumber, smsMessage));
        }
        await Promise.all(smsSendPromises);
        console.log(`üì± ‡∏™‡πà‡∏á SMS ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${smsPhoneNumbers.length} ‡∏Ñ‡∏ô`);
      } else if (smsPhoneNumbers.length > 0) {
         console.warn("‚ö†Ô∏è SMS recipients found, but SMS API credentials are not fully set. Skipping SMS broadcast.");
      }


      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ repeatCount)
      // frequency ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏ó‡∏∏‡∏Å X ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á Y ‡∏ô‡∏≤‡∏ó‡∏µ" (e.g., "‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 0 ‡∏ô‡∏≤‡∏ó‡∏µ")
      const freqMatch = data.frequency ? data.frequency.match(/(\d+)\s*‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\s*(\d+)\s*‡∏ô‡∏≤‡∏ó‡∏µ/) : null;
      if (freqMatch && freqMatch.length >= 3) {
        const h = parseInt(freqMatch[1], 10);
        const m = parseInt(freqMatch[2], 10);
        const nextTime = data.notifyTime.toDate();
        nextTime.setHours(nextTime.getHours() + h);
        nextTime.setMinutes(nextTime.getMinutes() + m);

        if (data.repeatCount > 1) {
          await doc.ref.update({
            notifyTime: Timestamp.fromDate(nextTime),
            repeatCount: data.repeatCount - 1,
          });
          console.log(`üîÅ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å ${data.repeatCount - 1} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
        } else {
          await doc.ref.update({ sent: true });
          console.log(`‚úÖ ‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á`);
        }
      } else {
        // frequency ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ
        await doc.ref.update({ sent: true });
        console.log(`‚ùå frequency ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏ô‡∏≤‡∏ó‡∏µ" ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á`);
      }
    }
  } catch (err) {
    console.error('‚ùå Error in cron job:', err);
  }
});

// ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á /line-users, /messages/:userId, /send-message, /mark-as-read/:userId ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
app.get('/line-users', async (req, res) => {
  try {
    const snapshot = await db.collection('lineUsers').get();
    const users = [];

    let count = 1;

    for (const doc of snapshot.docs) {
      const userId = doc.id;
      const label = `‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà ${count++}`;

      // ‡∏≠‡πà‡∏≤‡∏ô subcollection messages
      const messagesSnap = await db.collection('lineUsers')
        .doc(userId)
        .collection('messages')
        .where('direction', '==', 'in')
        .where('unread', '==', true)
        .get();

      const unreadCount = messagesSnap.size;

      users.push({
        userId,
        label,
        unreadCount,
      });
    }

    res.json(users);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to fetch users' });
  }
});


app.get('/messages/:userId', async (req, res) => {
  const { userId } = req.params;
  try {
    const messagesRef = db.collection('lineUsers').doc(userId).collection('messages');
    const snapshot = await messagesRef.orderBy('timestamp', 'asc').get();

    const messages = snapshot.docs.map(doc => doc.data());
    res.json({ messages });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to fetch messages' });
  }
});


app.post('/send-message', bodyParser.json(), async (req, res) => {
    console.log('[DEBUG] req.body:', req.body);
  const { userId, message } = req.body;
  if (!userId || !message) {
    return res.status(400).json({ error: 'userId and message are required' });
  }

  try {
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô LINE API
    await client.pushMessage(userId, {
      type: 'text',
      text: message,
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° outgoing
    await db.collection('lineUsers').doc(userId)
      .collection('messages').add({
        direction: 'out', // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
        message,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
      });

    res.json({ success: true });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to send message' });
  }
});

app.post('/mark-as-read/:userId', async (req, res) => {
  const { userId } = req.params;
  try {
    const snapshot = await db.collection('lineUsers').doc(userId).collection('messages')
      .where('unread', '==', true).get();

    const batch = db.batch();
    snapshot.forEach(doc => {
      batch.update(doc.ref, { unread: false });
    });

    await batch.commit();
    res.json({ success: true });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to mark messages as read' });
  }
});


// === Start Server ===
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
});